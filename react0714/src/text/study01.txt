리액트 프로젝트 구성

node_modules 폴더 : node.js. 모듈이 설치되는 폴더, 리액트 프로젝트가 동작되는데 필요한 모듈이 설치되는 폴더(신경 nono)
                    build시 필요없는 부분은 자동 제외됨

public : 리액트 프로젝트의 기본 파일이 위치하는 곳 == spring boot 의 stitc 과 비슷한 폴더이다., index.html 파일에 있는 div 태그를 리액트 프로그램이 조작하여 화면을 표시함

src : 리액트 프로젝트의 소스코드가 존재하는 폴더

index.js : 리액트 프로젝트의 시작점, 리액트 프로젝트 시작 시 index.html 파일안의 div 태그 중 id값이 'root'인 태그를 검색하여 선택하고 index.js를 로딩하여 index.js의 내용을 실행하여 화면을 구성

DOM (DOCUMENT OBJECT MODEL) 약자 = 리액트 웹 문서

root.rander : 화면에 그려 주겠다 라는 뜻이다.
MPA : Multi Page Application 의 줄임말, 웹 페이지가 여러개 있는 형태의 웹사이트, 기존 방식의 웹사이트
SPA : Single Page Application 의 줄임말, 웹 페이지가 단 하나로 이루어진 웹 사이트, 자바스크립트를 이용하여 필요에 따라서 웹페이지를 새로 그려내는 사이트

Virtual DOM :  리액트에서 웹페이지를 그려내기 위해서 사용하는 방식
 - 기본적으로 웹은 화면을 한번 출력하고 다시 수정된 화면을 출력 시 모든 화면을 다시 그려야함
 - 화면을 재출력 하기 위해서 새로 그리면 화면이 깜빡임 현상이 발생함
 - 조금의 수정이 발생해도 모든 리소스를 다시 호출하기 때문에 리소스 성능이 떨어짐

 리액트는 컴포넌트 기반으로 화면을 구성함
 - 화면을 구성하는 부분을 뜩함
 - js나 htymeleaf를 이용하여 여러가지 파일을 하나로 합하여 하나의 웹페이즐 구성하는 것과 비슷함
 - 재상용이 높아진다

 JAX : 리액트에서 사용하는 자바스크립트 확장 문법
  - Javascript + XML/HTML 을 의미함
  - 자바스크립트 변수에 HTML 태그를 그대로 사용하여 화면을 구성
  - xml 문법 규칙을 기본으로 하기 때문에 시작태그와 끝 태그가 반드시 한쌍으로 구성되어야 함 -> 닫는 테그가 무조건 있어야 한다.
  - 시작 태그의 마지막에 끝 태그를 뜻하는 / 를 추가하면 시작 태그만 있어도 상관없음
  - ex) <br></br>
        <hr/>
  - render() 메소드의 return 에 화면을 그리기 위한 html 태그 및 컴포넌트를 입력하여 화면을 구성함
  - render() 메소드의 return 에 들어가는 태그가 1개일 경우 ()가 필요가 없다. 마치 if문 for문 처럼 2개 이상을 경우 반드시 ()로 감싸야 한다. 필수 규칙!!
  - render() 메소드의 return 에 들어가는 부모 태그는 반드시 1개 이어야 함

  2023-07-14 강의 내용

  엘리먼트(element) : 리액트 앱의 가장작은 빌드 블록
   - 웹 페이지의 정보를 담고 있는 DOM에서 사용하는 용어 (HTML 태그를 뜻함)
   - 리액트에서는 엘리먼트를 리액트 엘리먼트라고 함
   - 리액트는 Virual DOM을 사용하고 리액트 엘리먼트는 Virual DOM에 존재함
   - 리액트 엘리먼트는 DOM에서의 가상 표현
   - 리액트에서 엘리먼트는 자바스크립트의 object 타입으로 존재함

   엘리먼트(element) 특징 : 엘리먼트는 생성 후에는 childrend 이나 attributes를 변경할 수 없음(불변성)
   - 엘리먼트는 생성 후 변경할 수 없기 때문에 수정된 내용이 필요시 새로 생성하여 바꿔치기함
   - 이를 위해서 Virtual DOM을 사용함

   컴포넌트 : 리액트에서 화면을 구성하는 자바스크립트 클래스 혹은 함수
            - 여러개의 컴포넌트를 레고 블럭 처럼 사용하여 하나의 큰 화면을 구성함
            - 개념적으로 자바스크립트 함수와 비슷함
            - props를 입력받아 JSX 문법으로 화면을 구성하고 엘리먼트를 출력함
            - 자바의 클래스와 객체의 관계와 비슷함

    * props : 리액트 컴포넌트의 속성
            - 자바스크립트 object 타입으로 구성되어 있음
            - 읽기 전용 *
            - 데이터 전달 :
                - 부모 컴포넌트에서 자식 컴포넌트 호출 시 전달할 속성명과 값을 함께 전달
                - <Button 속성명=속성값1. 속성명2=속성값2,...></Button>
                - 문자열 데이터는'', "" 를 사용하여 데이터 전달
                - 문자열을 제외한 다른 데이터 타입은 반드시 {}를 사용하여 전달
                - 데이터를 사용하는 자식 컴포넌트에서 props.속성명 형태로 사용함
  컴포넌트 종류 : 리액트에서는 함수 컴포 넌트와 클래스 컴포넌트로 두자기의 컴포넌트를 제공하고 있음
 		 - 예전에는 클래스 컴포넌트를 사용했음
		 - 컴포넌트 생명주기를 사용할 수 있기 때문에 리액트의 모든 기능을 사용할 수 있음
		 - React.Compoment 클래스를 상속받아 사용하는 방식
		 - props, state 의 사용 시 구분이 힘든 부분이 존재하여 사용이 힘들었음
		 - 현재는 함수 컴포넌트를 주로 사용함
		 - 컴포넌트 생명주기에 관련된 함수를 사용할 수 없었지 때문에 기능에 제약이 있었음 
		 - 리액트 16.8 버전부터 Hooks 라는 기능이 추가되어 함수 컴포넌트에서도 모든 기능을 다 사용할 수 있도록 함

  컴포넌트 합성 : 여러개의 컴포넌트를 합하여 하나의 UI 로 만드는 것
  컴포넌트 추출 : 하나의 컴포넌트에서 여러개의 컴포넌트로 분리하는 것

 2023-07-17(월) 강의 내용

 state : 리액트컴포넌트의 상태, 리액트 컴포넌트의 수정 가능한 데이터 
	(리액트에서 사용하는 데이터 2개 
		[
		props - 매개변수 부모컴포넌트 ->> 자식 컴포넌트로 전달하는 데이터 , 읽기 전용
		state - 현재 컴포넌트의 데이터 수정 할떄 사용 , 데이터 수정 가능
		]
			)
 - 렌더딩이나 데이터 흐름에 사용되는 값만 state에포함해야 함
 - js object 타입으로 구성되어 있음
 - state도 직접적인 변경이 불가능함(setState() 라는 함수를 사용하여 수정)
 - 함수 컴포넌트에서는 hooks의 하나인 useState를 사용하여 수정
 - 클래스 컴포넌트에서 setState() 함수를 사용함


리액트 생명주기 : 리액트 컴포넌트가 생성되고 수정되고 삭제될 떄 실행되는  과정
- 리액트 생명주기에 따라 3개의 메소드가 존재하고 실행됨
-- compoentDidMount() : 컴포넌트가 생성된 후 실행되는 메소드
-- componentDidUpdate() : 컴포넌트의 내용이 수정된 후 실행되는 메소드
-- componentWillUnmount() : 컴포넌트 삭제되지 직전에 실행되는 메소드




