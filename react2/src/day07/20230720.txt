컴포넌트 합성 : 여러개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것
Containment: 하위 컴포넌트를 포함하는 형태의 합성(포함)
Specialization : 범용적인 개념은 구별이 되도록 구체화하는 것(구체화)

컨텍스트 : 컴포넌트의 데이터를 컴포넌트 트리를 통해서 바로 원하는 컴포넌트에 전달하는 객체
            --따로 컨텐스트 파일로 분리해서 관리을 해줘야 한다.

ex code)
    import React from 'react';

    const ThemeContext = React.createContext('기본값');

    ThemeContext.displayName = 'ThemeContext';

    export default ThemeContext;

React.createContext(기본값) : 컨텍스트 객체를 생성, 기본값 반드시 설정
    - 컨텍스트 객체 하나에 하나의 데이터만 저장할 수 있음 한번에 많은 것을 넣고 싶으면 object 타입니다 배열로 넣으면 된다. => {key:value,.....} : object type && ['','',.....] : array type 방식으로 데이터를 전달할수 있음

    - Provider : 생성된 컨텍스트를 사용할 자식 컴포넌트를 지정
        -- value : 전달하고자 하는 데이터를 지정
        -- 여러개의 Provider를 사용하는 것이 가능함
        -- 사용법 :
            <컨텍스트명.Provider value={전달할 데이터}>
                <자손 컴포넌트/>
            </컨텍스트명.Provider>

    - Consumer : Provider로 감싸진 자손 컴포넌트 중 저장된 데이터를 사용하고자 할 경우 사용
        -- 여러개의 Consumer를 사용하는 것이 가능함
        -- 사용법:
            <컨테스트명.Consumer>
                <{value => <컴포넌트명 속성명= {value}/>}
            </컨테스트명.Consumer>


Context.diplayName: 컨텍스트의 이름을 지정할 떄 사용함
    - 개발자 도구의 Components 에서 displayName 으로 지정한 이름이 출력됨
    -- <지정한 이름.Provider>, <지정한 이름.Consumer> 라는 이름으로 출력이 된다.
    -- 사용법 :
            컨텍스트명.displayName='사용하려는 이름'


useContext : 컨텐스트를 사용하기 위한 리액트의 hooks
    - useContext를 사용하면 Consumer를 입력하지 않아도 됨, Provider 만 써도 된다.
    - 사용법
        const 변수명=useContext(컨텍스명);